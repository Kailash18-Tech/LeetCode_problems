             0240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.

SOURCE CODE:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row=matrix.length-1; 
        int col=matrix[0].length-1; 
        int m=0;
        while(m<=row&&col>=0)
        {
            if(matrix[m][col]==target)
            {
                return true;
            }
            else if(matrix[m][col]>target)
            {
                col--;
            }
            else 
            {
                m++;
            }
            
        }
        return false;
    }
}

OUTPUT:

Example 1:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false
