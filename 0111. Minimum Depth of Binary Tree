                0111. Minimum Depth of Binary Tree

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

SOURCE CODE:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 int minDepth(struct TreeNode* root) {
    if (root == NULL) return 0;

    // If one child is NULL, take the other side
    if (root->left == NULL && root->right != NULL)
        return 1 + minDepth(root->right);
    if (root->right == NULL && root->left != NULL)
        return 1 + minDepth(root->left);

    // If both exist, take the smaller depth
    int leftDepth = minDepth(root->left);
    int rightDepth = minDepth(root->right);
    return (leftDepth < rightDepth ? leftDepth : rightDepth) + 1;
}

OUTPUT:


Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2
Example 2:

Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5
